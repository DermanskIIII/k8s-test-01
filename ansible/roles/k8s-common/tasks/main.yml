---
- name: setup hosts file
  tags: prepare_host
  ansible.builtin.template: 
    src: hosts.j2
    dest: /etc/hosts

- name: install necessary system packages
  tags: prepare_host
  ansible.builtin.apt:
    update_cache: true
    name: [ gpg, gnupg, acl, apt-transport-https, ca-certificates, curl ]
    state: present

- name: Установка containerd
  block:
    - name: Загрузка containerd
      ansible.builtin.get_url:
        url: "https://github.com/containerd/containerd/releases/download/v2.0.4/containerd-2.0.4-linux-amd64.tar.gz"
        dest: "/tmp/containerd-2.0.4-linux-amd64.tar.gz"
        checksum: "sha256:e1c64c5fd60ecd555e750744eaef150b6f78d7f750da5c08c52825aa6b791737" 

    - name: Распаковка containerd
      ansible.builtin.unarchive:
        src: "/tmp/containerd-2.0.4-linux-amd64.tar.gz"
        dest: "/usr/local"
        remote_src: yes
        owner: root
        group: root

    - name: Удаление архива containerd
      ansible.builtin.file:
        path: "/tmp/containerd-2.0.4-linux-amd64.tar.gz"
        state: absent

    - name: Создание директории конфигурации containerd
      ansible.builtin.file:
        path: "/etc/containerd"
        state: directory
        owner: root
        group: root

    - name: Создание конфигурации по умолчанию для containerd
      ansible.builtin.copy:
        dest: "/etc/containerd/config.toml"
        content: |
          containerd config default
        owner: root
        group: root

- name: Установка runc
  block:
    - name: Скачиваем бинарник runc
      ansible.builtin.get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v1.2.6/runc.amd64"
        dest: /tmp/runc.amd64
        checksum: "sha256:0774f49d1b1eebb5849e644db5e4dc6f2b06cee05f13b3d17d5d6ba62d6f2ebc" 
        owner: root
        group: root
        mode: 0755

    - name: Установливам бинарника runc
      ansible.builtin.copy:
        remote_src: true
        src: /tmp/runc.amd64
        dest: /usr/local/sbin/runc
        owner: root
        group: root
        mode: 0755

    - name: cleanup /tmp/runc.amd64
      ansible.builtin.file:
        path: "/tmp/runc.amd64"
        state: absent

- name: Установка сетевых плагинов
  block:
    - name: Загрузка сетевых плагинов
      ansible.builtin.get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.6.2/cni-plugins-linux-amd64-v1.6.2.tgz"
        dest: "/tmp/cni-plugins-linux-amd64-v1.6.2.tgz"
        checksum: "sha256:b8e811578fb66023f90d2e238d80cec3bdfca4b44049af74c374d4fae0f9c090"

    - name: Создание директории для сетевых плагинов
      ansible.builtin.file:
        path: "/opt/cni/bin"
        state: directory
        owner: root
        group: root

    - name: Распаковка сетевых плагинов
      ansible.builtin.unarchive:
        src: "/tmp/cni-plugins-linux-amd64-v1.6.2.tgz"
        dest: "/opt/cni/bin"
        remote_src: yes
        owner: root
        group: root

    - name: Удаление архива сетевых плагинов
      ansible.builtin.file:
        path: "/tmp/cni-plugins-linux-amd64-v1.6.2.tgz"
        state: absent

- name: Создание и запуск сервиса containerd
  block:
    - name: Создание файла systemd service
      ansible.builtin.copy:
        src: "containerd.service"
        dest: "/lib/systemd/system/containerd.service"
        owner: root
        group: root

    - name: Перезагрузка systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Запуск и включение containerd
      ansible.builtin.systemd:
        name: containerd
        enabled: yes
        state: started

- name: Настройка конфигурации crictl
  block:
  - name: Создание конфигурации crictl
    ansible.builtin.copy:
      dest: "/etc/crictl.yaml"
      content: |
        runtime-endpoint: unix:///var/run/containerd/containerd.sock
      owner: root
      group: root

- name: add Docker and K8s gpg-keys
  tags: prepare_host
  ansible.builtin.apt_key:
    url: "{{ item.url }}"
    state: present
    keyring: "/etc/apt/trusted.gpg.d/{{ item.file }}"
  loop:
    - { url: "https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key", file: "kubernetes.gpg" }

- name: add Docker and K8s repos
  tags: prepare_host
  ansible.builtin.apt_repository:
    repo: "{{ item.repo }}"
    filename: "{{ item.filename }}"
    state: "{{ item.state }}"
    update_cache: "{{ item.update_cache }}"
  loop:
    - { repo: "deb [signed-by=/etc/apt/trusted.gpg.d/kubernetes.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /", filename: kubernetes, update_cache: false, state: present}

- name: install common k8s packages (kubelet, kubeadm, kubectl)
  tags: prepare_host
  ansible.builtin.apt:
    update_cache: true
    name: [ kubelet, kubeadm, kubectl ]
    state: present

- name: enable loading necessary kernel modules at boot
  tags: prepare_host
  ansible.builtin.blockinfile:
    path: "/etc/modules-load.d/99-kubernetes.conf"
    create: true
    block: |
          br_netfilter
          overlay

- name: load necessary kernel modules
  tags: prepare_host
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop: 
    - br_netfilter
    - overlay

- name: set necessary kernel modules options
  tags: prepare_host
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: 1
    state: present
    reload: true
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables' }
    - { name: 'net.ipv4.ip_forward' }

- name: disable swap
  tags: prepare_host
  ansible.builtin.shell:
    cmd: swapoff -a

- name: disable swap at boot
  tags: prepare_host
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
